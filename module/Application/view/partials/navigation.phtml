<?php
use Laminas\Escaper\Escaper;
use User\Model\UserModel;

$navHelper = $this->navigation('navigation');

if ($user = $this->currentUser()) {
    $roles = [];
    $memberofs = $user->memberOf();
    foreach ($memberofs as $memberof) {
        $roles[] = $memberof['ROLENAME'];
    }
    $navHelper->setRoles($roles);
}
// $navHelper
//     ->setAcl($this->acl)
//     ->setRole('admin');
$iterator = new RecursiveIteratorIterator($this->container, RecursiveIteratorIterator::SELF_FIRST);

$ulClass = "navbar-nav mr-auto";
$liActiveClass = "active";
$addClassToListItem = TRUE;
$onlyActive = FALSE;
$minDepth = "0";
$maxDepth = NULL;
$indent = "";
$escapeLabels = "";

$html = '';

// find deepest active
// $found = $this->findActive($container, $minDepth, $maxDepth);
$found = NULL;

$escaper = new Escaper();

if ($found) {
    $foundPage = $found['page'];
    $foundDepth = $found['depth'];
} else {
    $foundPage = null;
}

// create iterator
// $iterator = new RecursiveIteratorIterator($container, RecursiveIteratorIterator::SELF_FIRST);

if (is_int($maxDepth)) {
    $iterator->setMaxDepth($maxDepth);
}

// iterate container
$prevDepth = - 1;
foreach ($iterator as $page) {
    $depth = $iterator->getDepth();
    $isActive = $page->isActive(true);
    // if ($depth < $minDepth || ! $this->accept($page)) {
    if ($depth < $minDepth || ! $navHelper->accept($page)) {
        // page is below minDepth or not accepted by acl/visibility
        continue;
    } elseif ($onlyActive && ! $isActive) {
        // page is not active itself, but might be in the active branch
        $accept = false;
        if ($foundPage) {
            if ($foundPage->hasPage($page)) {
                // accept if page is a direct child of the active page
                $accept = true;
            } elseif ($foundPage->getParent()->hasPage($page)) {
                // page is a sibling of the active page...
                // if (! $foundPage->hasPages(! $this->renderInvisible) || is_int($maxDepth) && $foundDepth + 1 > $maxDepth) {
                if (! $foundPage->hasPages(! $navHelper->renderInvisible) || is_int($maxDepth) && $foundDepth + 1 > $maxDepth) {
                    // accept if active page has no children, or the
                    // children are too deep to be rendered
                    $accept = true;
                }
            }
        }
        if (! $accept) {
            continue;
        }
    }

    // make sure indentation is correct
    $depth -= $minDepth;
    $myIndent = $indent . str_repeat('        ', $depth);
    if ($depth > $prevDepth) {
        // start new ul tag
        if ($ulClass && $depth == 0) {
            $ulClass = ' class="' . $escaper->escapeHtmlAttr($ulClass) . '"';
        } else {
            $ulClass = ' class="dropdown-menu"';
        }
        $html .= $myIndent . '<ul' . $ulClass . '>' . PHP_EOL;
    } elseif ($prevDepth > $depth) {
        // close li/ul tags until we're at current depth
        for ($i = $prevDepth; $i > $depth; $i --) {
            $ind = $indent . str_repeat('        ', $i);
            $html .= $ind . '    </li>' . PHP_EOL;
            $html .= $ind . '</ul>' . PHP_EOL;
        }
        // close previous li tag
        $html .= $myIndent . '    </li>' . PHP_EOL;
    } else {
        // close previous li tag
        $html .= $myIndent . '    </li>' . PHP_EOL;
    }

    // render li tag and page
    $liClasses = [
        'nav-item'
    ];
    $aClass = ' class="nav-link"';
    $caret = '';

    // Is page active?
    if ($isActive) {
        $liClasses[] = $liActiveClass;
    }

    $parent = $page->getParent();

    if ($page->hasPages() && $depth == 0) {
        $aClass = ' class="nav-link dropdown-toggle" data-toggle="dropdown"';
        $caret = '<b class="caret"></b>';
    } elseif ($page->hasPages() && $depth > 0) {
        $aClass = ' class="dropdown-item dropdown-toggle" data-toggle="dropdown"';
        $caret = '<b class="caret"></b>';
    } elseif (! $page->hasPages() && $depth > 0) {
        $aClass = ' class="dropdown-item"';
    } else {
        $aClass = ' class="nav-link"';
    }

    if ($depth > 1) {
        $liClasses = [];
    }

    // Add CSS class from page to <li>
    if ($addClassToListItem && $page->getClass()) {
        $liClasses[] = $page->getClass();
    }
    $liClass = empty($liClasses) ? '' : ' class="' . $escaper->escapeHtmlAttr(implode(' ', $liClasses)) . '"';
    // $html .= $myIndent . ' <li' . $liClass . '>' . PHP_EOL . $myIndent . ' ' . $this->htmlify($page, $escapeLabels, $addClassToListItem) . PHP_EOL;
    // $html .= $myIndent . ' <li' . $liClass . '>' . PHP_EOL . $myIndent . ' ' . $navHelper->htmlify($page, $escapeLabels, $addClassToListItem) . PHP_EOL;
    $html .= $myIndent . '    <li' . $liClass . '>' . PHP_EOL . $myIndent . '        ' . sprintf('<a %s href="%s">%s%s</a>', $aClass, $page->getHref(), $page->getLabel(), $caret) . PHP_EOL;

    // store as previous depth for next iteration
    $prevDepth = $depth;
}

if ($html) {
    // done iterating container; close open ul/li tags
    for ($i = $prevDepth + 1; $i > 0; $i --) {
        $myIndent = $indent . str_repeat('        ', $i - 1);
        $html .= $myIndent . '    </li>' . PHP_EOL . $myIndent . '</ul>' . PHP_EOL;
    }
    $html = rtrim($html, PHP_EOL);
}

echo $html;
?>
